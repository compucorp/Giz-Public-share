<?php

use Civi\Angular\Manager;

/**
 * Class CRM_Civicase_Page_ContactActivityTab.
 *
 * Implement the Angular version of the tab "View Contact => Cases".
 */
class CRM_Civicase_Page_ContactCaseTab extends CRM_Core_Page {

  /**
   * Run Function.
   *
   * Sets variables required by the Page template.
   *
   * @return string
   *   The content generated by running this page
   */
  public function run() {
    $caseTypeCategory = CRM_Utils_Request::retrieveValue('case_type_category', 'String');
    $this->assign('case_type_category', $caseTypeCategory);
    $caseCategoryName = CRM_Civicase_Helper_CaseCategory::getCaseCategoryNameFromOptionValue($caseTypeCategory);
    CRM_Civicase_Hook_Helper_CaseTypeCategory::addWordReplacements($caseCategoryName);

    // Skip translations for default case category:
    if (strtolower($caseCategoryName) == 'cases') {
      CRM_Core_Resources::singleton()->addSetting([
        'strings::uk.co.compucorp.civicase' => [],
      ]);

      return parent::run();
    }

    $translations = $this->getModuleAndDependenciesTranslations('civicase');

    CRM_Core_Resources::singleton()->addSetting($translations);

    return parent::run();
  }

  /**
   * Returns the translation settings for the given module and its dependencies.
   *
   * Given a module's name, it will find all the translations for the module and
   * its dependencies.
   *
   * @param string $mainModuleName
   *   The module's name to fetch translations from.
   *
   * @return array
   *   A list of translation settings.
   */
  private function getModuleAndDependenciesTranslations($mainModuleName) {
    $angularManager = new Manager(CRM_Core_Resources::singleton());
    $moduleAndDependenciesNames = $angularManager->resolveDependencies([$mainModuleName]);

    foreach ($moduleAndDependenciesNames as $moduleName) {
      $module = $angularManager->getModule($moduleName);
      $translationDomainName = 'strings::' . $module['ext'];
      $moduleTranslations = $angularManager->getTranslatedStrings($moduleName);

      if (empty($moduleTranslations)) {
        continue;
      }

      if (!isset($translations[$translationDomainName])) {
        $translations[$translationDomainName] = [];
      }

      $translations[$translationDomainName] = array_merge(
        $translations[$translationDomainName],
        $moduleTranslations
      );
    }

    return $translations ?? [];
  }

}
